// Generated by Apple Swift version 4.1.2 effective-3.3.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import QuartzCore;
@import ObjectiveC;
@import Foundation;
@import CoreBluetooth;
@import UIKit;
@import CoreData;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Mobilisten",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, APNSMode) {
  APNSModeSandbox = 0,
  APNSModeProduction = 1,
};

/// TimeStyle
/// \code
///  case curveLess
///  case roundedCurve
///  case boxUpperCurve
///  case boxLowerCurve
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, BubbleStyle) {
/// This type is used to display the chat bubble without curve
  BubbleStyleCurveLess = 0,
/// This type is used to display the chat bubble with rounded curve
  BubbleStyleRoundedCurve = 1,
/// This type is used to display the chat bubble with upper arrow
  BubbleStyleBoxUpperCurve = 2,
/// This type is used to display the chat bubble with lower arrow
  BubbleStyleBoxLowerCurve = 3,
};



@class VisitorChat;

/// ChatActivityHandler is a NSObject class which contains the event handler methods.
SWIFT_CLASS("_TtC10Mobilisten19ChatActivityHandler")
@interface ChatActivityHandler : NSObject
/// This event handler allows you to invoke a method when the visitor enters/exits the chat window.
/// \param isinternal - Boolean determines whether visitor internal or close the chat window
///
- (void)handleWidgetActionWithIsOpen:(BOOL)isOpen;
/// This event handler allows you to invoke a method when the user attends the chat initiated by the visitor.
/// \param visitor - VisitorChat object containing the data <em>Visit Id,Attender Email,Question</em>
///
- (void)handleVisitorAttendedWithVisitor:(VisitorChat * _Nonnull)visitor;
/// This event handler allows you to invoke a method, when the chat initiated by the visitor is not answered by the user or missed.
/// \param visitor - VisitorChat object containing the data <em>Visit Id,Question</em>
///
- (void)handleVisitorMissedWithVisitor:(VisitorChat * _Nonnull)visitor;
/// This event handler allows you to invoke a method, when the agents are offline. This will be called once after the page is loaded.
- (void)handleAgentsOffline;
/// This event handler allows you to invoke a method, when the agents are online. This will be called once after the page is loaded.
- (void)handleAgentsOnline;
/// This event handler allows you to invoke a method, when a chat session is completed.
/// \param visitor - VisitorChat object containing the data <em>Visit Id,Attender Email,Question</em>
///
- (void)handleChatCompleteWithVisitor:(VisitorChat * _Nonnull)visitor;
/// This event handler allows you to invoke a method, on completion of a rating.
/// \param visitor - VisitorChat object containing the data <em>Visit Id,Attender Email,Question,Rating</em>
///
- (void)handleRatingWithVisitor:(VisitorChat * _Nonnull)visitor;
/// This event handler allows you to invoke a method, on completion of a feedback.
/// \param visitor - VisitorChat object containing the data <em>Visit Id,Attender Email,Question,Feedback</em>
///
- (void)handleFeedbackWithVisitor:(VisitorChat * _Nonnull)visitor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// ChatComponent
/// \code
/// case agent
/// case rating
/// case feedback
/// case agentPhotoOnChatIcon
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, ChatComponent) {
/// This component used to show/hide agent profile photo in chat window
  ChatComponentAgent = 0,
/// This component used to show/hide rating window
  ChatComponentRating = 1,
/// This component used to show/hide feedback window
  ChatComponentFeedback = 2,
/// This component used to show/hide agent photo on chat icon
  ChatComponentAgentPhotoOnChatIcon = 3,
/// This component used to show/hide Conversations  view
  ChatComponentConversations = 4,
/// This component used to show/hide faq  view
  ChatComponentFaq = 5,
};




SWIFT_CLASS("_TtC10Mobilisten14LCAdminHandler")
@interface LCAdminHandler : NSObject
- (void)setChatHandler:(ChatActivityHandler * _Nonnull)handler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LiveChatViewController;
enum SystemMessage : NSInteger;
@class UIImage;
@class UIColor;
enum TimeStyle : NSInteger;

SWIFT_CLASS("_TtC10Mobilisten15LCSharedHandler")
@interface LCSharedHandler : NSObject
@property (nonatomic, strong) LiveChatViewController * _Null_unspecified lcController;
/// This API helps you to set title for the SalesIQ chat UI header.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setTitle("Zylker Live Support")
///
/// \endcodeprecondition:
/// Title should not be nil
/// \param title - Chat window title
///
- (void)setTitle:(NSString * _Nullable)title;
/// This API allows you to clear the messages in the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.clearMessages()
///
/// \endcode
- (void)clearMessages;
- (void)clearData;
- (void)setQuestion:(NSString * _Nullable)question;
/// This API is used to set a question and initiate a chat. This question will be sent immediately when the chat window is internaled i.e., the Chat will be initiated.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.startChat(question: "Hello, I need assistance.")
///
/// \endcodeprecondition:
/// Question should not be nil
/// \param question - String value determines question to initiate the chat
///
- (void)startChatWithQuestion:(NSString * _Nullable)question;
/// This API allows you to set the email address of a particular user to route the chats received from the visitors. If the Email address is provided in the API, then the visitor chats received in the application will be routed only to that specific user.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setAgentEmail("patricia@zylker.com")
///
/// \endcodenote:
/// If the User email address is provided in this API, then all the chats received from the visitor will be routed only to the particular user. Other users will not receive any chat notification from the visitors. If the mapped user is offline/Busy/engaged, then the chats will be routed to the other available users.
/// \param email - Agent email id
///
- (void)setAgentEmail:(NSString * _Nullable)email;
/// This API allows you to set a language for the Chat Widget.The language you would like to set in the chat widget will reflect, if you provide the name of the language in this API.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setLanguage(Language.english.languageCodeName())
///
///
/// \endcode\param language - Language name
///
- (void)setLanguage:(NSString * _Nullable)language;
/// This API allows you to display only the required departments in the pre-chat form. All other configured departments will be hidden regardless of their status.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setDepartment("ZylkerSales")
///
/// \endcodeprecondition:
/// Department name should not be nil
/// \param department - Department name
///
- (void)setDepartment:(NSString * _Nullable)department;
- (void)setDepartments:(NSArray<NSString *> * _Nullable)departments;
/// This API allows you to handle the visibility of User’s photo, Rating, Feedback i.e., you can enable or disable the users photo, rating and feedback in the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.SetVisibility(.agent, visible: true)
///
/// \endcodenote:
/// By default, the Rating and feeback will be enabled.
/// \param component - Enum determines type of ChatComponent (agent,rating,feedback,agentPhotoOnChatIcon)
///
/// \param visible - Boolean value determine to show or hide the component
///
- (void)setVisibility:(enum ChatComponent)component visible:(BOOL)visible;
/// This API is used to customize the system messages displayed in the chat widget.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setMessage(.chatCompleted, message: "Thank You for contacting us! Please leave us your valuable feedback.")
///
/// \endcode\param type - Enum determines type of SystemMessage (chatCompleted,ratingCompleted,feedbackCompleted,ratingAndFeedbackCompleted)
///
/// \param message - String value determine message to be displayed for SystemMessage
///
- (void)setMessage:(enum SystemMessage)type message:(NSString * _Nullable)message;
/// This API allows you to display the visitor’s photo in the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setVisitorImage(image: "IMAGENAME")
///
/// \endcodeprecondition:
/// Image should not be nil
/// \param image - Vistor image
///
- (void)setVisitorImage:(UIImage * _Nullable)image;
/// This API allows you to customize your theme color of the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setThemeColor(UIColor.greenColor())
///
/// \endcode\param color - UIColor
///
- (void)setThemeColor:(UIColor * _Nonnull)color;
/// This API allows you to set the backgroundColor of the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setMessageWindowBackgroundColor(UIColor.darkGray)
///
/// \endcode\param color - UIColor
///
- (void)setMessageWindowBackgroundColor:(UIColor * _Nonnull)color;
/// This API allows you to set the incomming message backgroundColor.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setIncommingMessageBackgroundColor(UIColor.lightGray)
///
/// \endcode\param color - UIColor
///
- (void)setIncommingMessageBackgroundColor:(UIColor * _Nonnull)color;
/// This API allows you to set the outgoing message backgroundColor.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setOutgoingMessageBackgroundColor(UIColor.blue)
///
/// \endcode\param color - UIColor
///
- (void)setOutgoingMessageBackgroundColor:(UIColor * _Nonnull)color;
/// This API allows you to set the time display style of the chat window.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setTimeDisplayStyle(.inside)
///
/// \endcode\param style - Enum determines type of TimeStyle(inside,outsideSlide)
///
- (void)setTimeDisplayStyle:(enum TimeStyle)style;
/// This API allows you to set the style for chat bubble.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.setBubbleDisplayStyle(.roundedCurve)
///
/// \endcode\param style - Enum determines type of BubbleStyle(curveLess,roundedCurve,boxUpperCurve,boxLowerCurve)
///
- (void)setBubbleDisplayStyle:(enum BubbleStyle)style;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// This API allows you to show the Chat Window i.e., to internal the chat window automatically.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Chat.show()
///
/// \endcode
- (void)show:(BOOL)isShow;
@end





@class CBCentralManager;

@interface LCSharedHandler (SWIFT_EXTENSION(Mobilisten)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
@end

typedef SWIFT_ENUM(NSInteger, Language) {
  LanguageEnglish = 0,
  LanguageFrench = 1,
  LanguageGerman = 2,
  LanguageSpanish = 3,
  LanguageDutch = 4,
  LanguageNorwegian = 5,
  LanguageTurkish = 6,
  LanguageRussian = 7,
  LanguagePortuguese = 8,
  LanguageItalian = 9,
  LanguageKorean = 10,
  LanguageJapanese = 11,
  LanguageDanish = 12,
  LanguagePolish = 13,
  LanguageArabic = 14,
  LanguageHungarian = 15,
  LanguageChinese = 16,
  LanguageHebrew = 17,
  LanguageIrish = 18,
  LanguageRomanian = 19,
  LanguageThai = 20,
  LanguageSwedish = 21,
  LanguageGreek = 22,
  LanguageCzech = 23,
  LanguageSlovak = 24,
  LanguageSlovenian = 25,
  LanguageCroatian = 26,
};


SWIFT_CLASS("_TtC10Mobilisten12LanguageCode")
@interface LanguageCode : NSObject
+ (NSString * _Nonnull)name:(enum Language)language SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerAnimatedTransitioning;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10Mobilisten22LiveChatViewController")
@interface LiveChatViewController : UIViewController <UIViewControllerTransitioningDelegate>
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (void)didReceiveMemoryWarning;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@class UITextView;

@interface LiveChatViewController (SWIFT_EXTENSION(Mobilisten)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end
























SWIFT_CLASS("_TtC10Mobilisten23NotificationLinkHandler")
@interface NotificationLinkHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// ChatComponent
/// \code
/// case chatCompleted
/// case ratingCompleted
/// case feedbackCompleted
/// case ratingAndFeedbackCompleted
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, SystemMessage) {
/// This system type is used to set the message when chat is completed
  SystemMessageChatCompleted = 0,
/// This system type is used to set the message when rating is completed
  SystemMessageRatingCompleted = 1,
/// This system type is used to set the message when feedback is completed
  SystemMessageFeedbackCompleted = 2,
/// This system type is used to set the message when rating and feedback is completed
  SystemMessageRatingAndFeedbackCompleted = 3,
};

/// TimeStyle
/// \code
/// case inside
/// case outsideSlide
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TimeStyle) {
/// This type is used to display the message time inside the chat bubble
  TimeStyleInside = 0,
/// This type is used to display the message time on user sliding the chat message
  TimeStyleOutsideSlide = 1,
};


SWIFT_CLASS("_TtC10Mobilisten13TrackingClass")
@interface TrackingClass : NSObject
/// This API is used to set title in each page for tracking the foot-path of the visitor while navigating from one page to the other.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Tracking.setPageTitle(title: "CURRENT PAGE TITLE")
///
/// \endcodeprecondition:
/// Page tile should not be nil
/// \param title - String value determines current page title
///
- (void)setPageTitle:(NSString * _Nonnull)title;
/// This API allows you to track the custom actions performed by the visitors in the mobile application.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Tracking.setCustomAction(name: "BUTTON TAPPED")
///
/// \endcodeprecondition:
/// Action name should not be nil
/// \param actionname - String value determines custom action name
///
- (void)setCustomAction:(NSString * _Nullable)actionname;
- (void)setCustomAction:(NSString * _Nullable)actionname action:(id _Nullable)action;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end











































@protocol NSFetchedResultsSectionInfo;

@interface UIViewController (SWIFT_EXTENSION(Mobilisten)) <NSFetchedResultsControllerDelegate>
- (void)controllerWillChangeContent:(NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull)controller;
- (void)controller:(NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull)controller didChangeObject:(id _Nonnull)anObject atIndexPath:(NSIndexPath * _Nullable)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath * _Nullable)newIndexPath;
- (void)controller:(NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull)controller didChangeSection:(id <NSFetchedResultsSectionInfo> _Nonnull)sectionInfo atIndex:(NSInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type;
- (void)controllerDidChangeContent:(NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull)controller;
@end




@interface UIWindow (SWIFT_EXTENSION(Mobilisten))
@property (nonatomic, readonly, strong) UIViewController * _Nullable visibleViewControllerFromWindow;
+ (UIViewController * _Nullable)getVisibleViewControllerfromParent:(UIViewController * _Nullable)vc SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC10Mobilisten11VisitorChat")
@interface VisitorChat : NSObject
@property (nonatomic, copy) NSString * _Nullable visitId;
@property (nonatomic, copy) NSString * _Nullable question;
@property (nonatomic, copy) NSString * _Nullable attenderEmail;
@property (nonatomic, copy) NSString * _Nullable feedback;
@property (nonatomic, copy) NSString * _Nullable rating;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10Mobilisten12VisitorClass")
@interface VisitorClass : NSObject
/// This API is used to fill the visitor’s name in the chat widget text box.Even if the visitor name field is hidden from the chat widget, the API can still set the visitor name and display it to the agent.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Visitor.setName(name: "NAME")
///
/// \endcodeprecondition:
/// Visitor name should not be nil
/// \param name - String value determines visitor name
///
- (void)setName:(NSString * _Nullable)name;
/// This API is used to fill the visitor email address in the chat widget text box.Even if the visitor email field is hidden from the chat widget, the API can still set the visitor email address and display it to the User.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Visitor.setEmail(email: "EMAIL")
///
/// \endcodeprecondition:
/// Email should not be nil
/// \param email - String value determines visitor email
///
- (void)setEmail:(NSString * _Nullable)email;
/// This API is used to fill the visitor contact number in the chat widget text box.Even if the visitor contact number field is hidden from the chat widget, the API can still set the visitor contact number and display it to the user.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Visitor.setContactNumber(contactnumber: "PHONE NUMBER")
///
/// \endcodeprecondition:
/// Phone number should not be nil
/// \param number - String value determines visitor phone number
///
- (void)setContactNumber:(NSString * _Nullable)number;
/// This API allows you to add the additional information about the visitor and displays it to the User in the visitor information section. These information are not visible to the visitors.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Visitor.addInfo("Gender", value: “Male”)
///
/// \endcodeprecondition:
/// key and value should not be nil
/// \param key - String value determines key for visitor info
///
/// \param value - String value determines value for visitor info
///
- (void)addInfo:(NSString * _Nullable)key value:(NSString * _Nullable)value;
/// This API is used to pre-fill a question in the chat widget.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.Visitor.setQuestion("Hello, I need assistance.")
///
/// \endcodeprecondition:
/// question should not be nil
/// \param question - String value determines question to pre fill in the input field
///
- (void)setQuestion:(NSString * _Nullable)question;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Mobilisten13VisitorObject")
@interface VisitorObject : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable email;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Mobilisten24VisitorTrackingInterface")
@interface VisitorTrackingInterface : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZohoSalesIQDelegate;

SWIFT_CLASS("_TtC10Mobilisten11ZohoSalesIQ")
@interface ZohoSalesIQ : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LCSharedHandler * _Nonnull Chat;)
+ (LCSharedHandler * _Nonnull)Chat SWIFT_WARN_UNUSED_RESULT;
+ (void)setChat:(LCSharedHandler * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LCAdminHandler * _Nonnull Admin;)
+ (LCAdminHandler * _Nonnull)Admin SWIFT_WARN_UNUSED_RESULT;
+ (void)setAdmin:(LCAdminHandler * _Nonnull)value;
@property (nonatomic, strong) VisitorTrackingInterface * _Nullable vsInterface;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) VisitorClass * _Nonnull Visitor;)
+ (VisitorClass * _Nonnull)Visitor SWIFT_WARN_UNUSED_RESULT;
+ (void)setVisitor:(VisitorClass * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) TrackingClass * _Nonnull Tracking;)
+ (TrackingClass * _Nonnull)Tracking SWIFT_WARN_UNUSED_RESULT;
+ (void)setTracking:(TrackingClass * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable apiDefinedPageTitle;)
+ (NSString * _Nullable)apiDefinedPageTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setApiDefinedPageTitle:(NSString * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <ZohoSalesIQDelegate> _Nullable delegate;)
+ (id <ZohoSalesIQDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ZohoSalesIQDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL embedInTab;)
+ (BOOL)embedInTab SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmbedInTab:(BOOL)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable deviceToken;)
+ (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceToken:(NSString * _Nullable)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable visitorId;)
+ (NSString * _Nullable)visitorId SWIFT_WARN_UNUSED_RESULT;
+ (void)setVisitorId:(NSString * _Nullable)newValue;
+ (void)initWithAppKey:(NSString * _Nonnull)appKey accessKey:(NSString * _Nonnull)accessKey SWIFT_METHOD_FAMILY(none);
+ (LiveChatViewController * _Nullable)chatController SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatControllerLeftBarButton:(UIImage * _Nullable)image title:(NSString * _Nullable)title;
/// This API allows you to show/hide the chat icon.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.showLiveChat(_ show:true)
///
/// \endcode\param show - Boolean value determines to show/hide the chat icon
///
+ (void)showLiveChat:(BOOL)show;
/// This API is used to enable the push notification for SalesIQ SDK.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.enablePush(regid: "DEVICE TOKEN", isTestDevice: BOOL)
///
/// \endcode\param regid - String value determines device token
///
/// \param isTestDevice - Boolean value determines the SDK environment whether it is Sandbox(TRUE) or Production(FALSE)
///
+ (void)enablePush:(NSString * _Nonnull)regid isTestDevice:(BOOL)isTestDevice mode:(enum APNSMode)mode;
/// This API is used to process the notifcation data for the SDK and display the notification message.
/// <h2>Usage Example</h2>
/// \code
/// ZohoSalesIQ.processNotificationWithInfo(info: notification.userInfo)
///
/// \endcode\param info - Notification info
///
+ (void)processNotificationWithInfo:(NSDictionary * _Nullable)info;
+ (void)setVisitorTrackingInterfaceHandler:(VisitorTrackingInterface * _Nullable)handler;
+ (void)setNotificationLinkHandler:(NotificationLinkHandler * _Nullable)handler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UNUserNotificationCenter;
@class UNNotificationResponse;
@class UNNotification;

SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface ZohoSalesIQ (SWIFT_EXTENSION(Mobilisten)) <UNUserNotificationCenterDelegate>
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
@end






SWIFT_PROTOCOL("_TtP10Mobilisten19ZohoSalesIQDelegate_")
@protocol ZohoSalesIQDelegate
- (void)updateBadgeCount:(NSInteger)count;
- (void)dismissChatController;
- (void)presentChatController;
- (void)didCloseChatWindow;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
